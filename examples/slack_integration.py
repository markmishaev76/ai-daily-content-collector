"""
Example: Slack Integration

This example shows how to send the daily brief to Slack instead of (or in addition to) email.
"""

import os
import requests
from typing import Dict, List


class SlackSender:
    """Send daily brief to Slack"""
    
    def __init__(self, webhook_url: str = None):
        """
        Initialize Slack sender
        
        Args:
            webhook_url: Slack webhook URL (or set SLACK_WEBHOOK_URL env var)
        """
        self.webhook_url = webhook_url or os.getenv("SLACK_WEBHOOK_URL")
        if not self.webhook_url:
            raise ValueError("Slack webhook URL is required")
    
    def format_slack_message(self, 
                            articles_by_topic: Dict[str, List[Dict]],
                            overview: str,
                            user_name: str = "there") -> Dict:
        """
        Format articles for Slack message
        
        Returns:
            Slack message payload
        """
        blocks = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": "üåÖ Your Morning Brief",
                    "emoji": True
                }
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": f"Good morning, {user_name}!\n\n{overview}"
                }
            },
            {"type": "divider"}
        ]
        
        # Add each topic section
        for topic_name, articles in articles_by_topic.items():
            if not articles:
                continue
            
            # Topic header
            blocks.append({
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": f"*üìö {topic_name}*"
                }
            })
            
            # Articles
            for article in articles[:5]:  # Limit to 5 per topic
                article_text = (
                    f"*<{article['link']}|{article['title']}>*\n"
                    f"{article.get('ai_summary', article['summary'][:200])}\n"
                    f"_{article.get('source', 'Unknown source')}_"
                )
                
                blocks.append({
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": article_text
                    }
                })
            
            blocks.append({"type": "divider"})
        
        # Footer
        blocks.append({
            "type": "context",
            "elements": [
                {
                    "type": "mrkdwn",
                    "text": "ü§ñ Generated by Your Personal AI Assistant"
                }
            ]
        })
        
        return {"blocks": blocks}
    
    def send_to_slack(self, message: Dict) -> bool:
        """
        Send message to Slack
        
        Args:
            message: Slack message payload
            
        Returns:
            True if successful
        """
        try:
            response = requests.post(
                self.webhook_url,
                json=message,
                timeout=10
            )
            response.raise_for_status()
            print("‚úÖ Message sent to Slack successfully")
            return True
        except Exception as e:
            print(f"‚ùå Error sending to Slack: {e}")
            return False


# Example: How to integrate into main.py
def send_to_slack_example():
    """
    Example of how to modify main.py to send to Slack
    """
    # Add to main.py after generating articles_by_topic and overview:
    
    """
    # Send to Slack (in addition to or instead of email)
    if os.getenv("SLACK_WEBHOOK_URL"):
        slack_sender = SlackSender()
        slack_message = slack_sender.format_slack_message(
            articles_by_topic=articles_by_topic,
            overview=overview,
            user_name=config.get('user_name', 'there')
        )
        slack_sender.send_to_slack(slack_message)
    """


# To use this:
# 1. Create a Slack webhook: https://api.slack.com/messaging/webhooks
# 2. Add to your .env: SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/WEBHOOK/URL
# 3. Import and use in main.py as shown above

if __name__ == "__main__":
    print("Slack Integration Example")
    print("\nTo set up:")
    print("1. Go to https://api.slack.com/messaging/webhooks")
    print("2. Create a new webhook for your workspace")
    print("3. Add SLACK_WEBHOOK_URL to your .env file")
    print("4. Integrate the SlackSender into your main.py")




